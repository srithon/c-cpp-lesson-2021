#+TITLE: C Lesson
* Explicit Pointers
[[./media/pointers-in-c.png]]

** Java
*** Pass by Value
#+begin_src java :classname Foo
public class Foo {
    static void increment_int(int int_argument) {
        int_argument++;
    }

    public static void main(String[] args) {
        int i = 0;
        System.out.println("int BEFORE incrementing = " + i);

        increment_int(i);
        System.out.println("int AFTER incrementing = " + i);
    }
}
#+end_src

#+RESULTS:
: int BEFORE incrementing = 0
: int AFTER incrementing = 0
*** Pass by Reference
#+begin_src java :classname Foo
public class Foo {
    static class MutableInt {
        int int_field;

        public String toString() { return "" + int_field; }
    }

    static void increment_mutable_int(MutableInt int_argument) {
        int_argument.int_field++;
    }

    public static void main(String[] args) {
        MutableInt integer = new MutableInt();
        System.out.println("int BEFORE incrementing = " + integer);

        increment_mutable_int(integer);
        System.out.println("int AFTER incrementing = " + integer);
    }
}
#+end_src

#+RESULTS:
: int BEFORE incrementing = 0
: int AFTER incrementing = 1

** C

#+begin_src C :results output
#include <stdio.h>

void increment_int(int* int_argument) {
    ,*int_argument = *int_argument + 1;
    // (*int_argument)++;
}

int main() {
    int i = 0;
    printf("i = %d\n", i);

    int* i_ptr = &i;
    printf("i_ptr = %p\n", i_ptr);

    increment_int(i_ptr);

    printf("dereferenced i_ptr = %d\n", *i_ptr);
    printf("i = %d\n", i);
}
#+end_src

#+RESULTS:
: i = 0
: i_ptr = 0x7fff974e5664
: dereferenced i_ptr = 1
: i = 1

* Stack vs Heap Allocation
*** NULL
* No Garbage Collection/Reference Counting
* No Namespaces
* Header Files
