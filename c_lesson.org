#+TITLE: C Lesson
* Explicit Pointers
[[./media/pointers-in-c.png]]

** Java
*** Pass by Value
#+begin_src java :classname Foo
public class Foo {
    static void increment_int(int int_argument) {
        int_argument++;
    }

    public static void main(String[] args) {
        int i = 0;
        System.out.println("int BEFORE incrementing = " + i);

        increment_int(i);
        System.out.println("int AFTER incrementing = " + i);
    }
}
#+end_src

#+RESULTS:
: int BEFORE incrementing = 0
: int AFTER incrementing = 0
*** Pass by Reference
#+begin_src java :classname Foo
public class Foo {
    static class MutableInt {
        int int_field;

        public String toString() { return "" + int_field; }
    }

    static void increment_mutable_int(MutableInt int_argument) {
        int_argument.int_field++;
    }

    public static void main(String[] args) {
        MutableInt integer = new MutableInt();
        System.out.println("int BEFORE incrementing = " + integer);

        increment_mutable_int(integer);
        System.out.println("int AFTER incrementing = " + integer);
    }
}
#+end_src

#+RESULTS:
: int BEFORE incrementing = 0
: int AFTER incrementing = 1

** C

#+begin_src C :results output
#include <stdio.h>

void increment_int(int *int_argument) {
    *int_argument = *int_argument + 1;
    // (*int_argument)++;
}

int main() {
    int i = 0;
    printf("i = %d\n", i);

    int *i_ptr = &i;
    printf("i_ptr = %p\n", i_ptr);

    increment_int(i_ptr);

    printf("dereferenced i_ptr = %d\n", *i_ptr);
    printf("i = %d\n", i);
}
#+end_src

#+RESULTS:
: i = 0
: i_ptr = 0x7fff974e5664
: dereferenced i_ptr = 1
: i = 1

*** Multiple Declarations
#+begin_src C :results output :tangle "code/multi_declaration_ptr.c"
#include <stdio.h>

int main() {
    int i = 1,
        j = 2;

    int* i_ptr = &i,
     // *j_ptr = &j;
         j_ptr = &j;

    printf("i: %p, j: %p", i_ptr, j_ptr);
}
#+end_src

#+RESULTS:
: i: 0x7ffe33997db0, j: 0x33997dac

**** gcc
With ~gcc~, this is only a warning by default
[[./media/multi_declaration_ptr_warning_gcc.png]]
**** g++
With ~g++~ (the ~C++~ compiler), this throws an error by default
[[./media/multi_declaration_ptr_error_g++.png]]

* Stack vs Heap Allocation
** Stack
See [[https://stackoverflow.com/a/13888303]]
*** With Static
#+begin_src C :results output :tangle code/stack.c
#include <stdio.h>

static int *i_ptr;

void assign_i_ptr() {
    int i = 10;
    i_ptr = &i;
}

void stack_allocate_another_int() {
    int b = 30;
}

int main() {
    assign_i_ptr();
    printf("*i_ptr = %d\n", *i_ptr);

    stack_allocate_another_int();
    printf("*i_ptr = %d", *i_ptr);
}
#+end_src

#+RESULTS:
: *i_ptr = 10
: *i_ptr = 30

*** Without Static
#+begin_src C :results output :tangle code/stack.c
#include <stdio.h>

void assign_i_ptr(int **i_ptr_ptr) {
    int i = 10;
    *i_ptr_ptr = &i;
}

void stack_allocate_another_int() {
    int b = 30;
}

int main() {
    int *i_ptr = NULL;

    assign_i_ptr(&i_ptr);
    printf("*i_ptr = %d\n", *i_ptr);

    stack_allocate_another_int();
    printf("*i_ptr = %d", *i_ptr);
}
#+end_src

#+RESULTS:
: *i_ptr = 10
: *i_ptr = 30

** Heap
#+begin_src C :results output :tangle code/heap.c
#include <stdio.h>
#include <stdlib.h>

static int *i_ptr;

void assign_i_ptr() {
    int *allocated_memory = malloc(sizeof(int));
    *allocated_memory = 10;
    i_ptr = allocated_memory;
}

void heap_allocate_another_int() {
    int *allocated_memory = malloc(sizeof(int));
    *allocated_memory = 100;
}

void stack_allocate_another_int() {
    int b = 30;
}

int main() {
    assign_i_ptr();
    printf("*i_ptr = %d\n", *i_ptr);

    stack_allocate_another_int();
    heap_allocate_another_int();

    printf("*i_ptr = %d", *i_ptr);
}
#+end_src

#+RESULTS:
: *i_ptr = 10
: *i_ptr = 10

* No Garbage Collection/Reference Counting
* No Namespaces
* Header Files
