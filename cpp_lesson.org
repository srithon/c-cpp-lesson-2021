#+TITLE: C++ Lesson

* new/delete
#+begin_src C++ :results output verbatim
#include <stdio.h>

int main() {
    for (int i = 0; i < 10; i++) {
        int *x = new int(i);
        printf("x = %d\n", *x);
        delete x;
    }
}
#+end_src

#+RESULTS:
#+begin_example
x = 0
x = 1
x = 2
x = 3
x = 4
x = 5
x = 6
x = 7
x = 8
x = 9
#+end_example

* Namespaces
- ~header1.hpp~
  #+begin_src C++ :tangle code/header1.hpp :main no
  #ifndef HEADER1_HPP
  #define HEADER1_HPP

  namespace foo {
      void do_something();
  }

  #endif
  #+end_src
- ~header2.hpp~
  #+begin_src C++ :tangle code/header2.hpp :main no
  #ifndef HEADER2_HPP
  #define HEADER2_HPP

  namespace foo {
      void do_something_else();
  }

  #endif
  #+end_src
- ~source1.cpp~
  #+begin_src C++ :tangle code/source1.cpp
  #include <stdio.h>
  #include "header1.hpp"
  #include "header2.hpp"

  void foo::do_something() {
      printf("Did something\n");
  }

  void foo::do_something_else() {
      printf("Did something else\n");
  }

  int main() {
      foo::do_something();

      using namespace foo;
      do_something_else();
  }
  #+end_src

#+begin_src shell :results output verbatim
cd code
make -s source1
./source1
#+end_src

#+RESULTS:
: Did something
: Did something else

* OOP
- ~foo.hpp~
  #+begin_src C++ :tangle code/oop/foo.hpp :mkdirp yes :main no
  #ifndef FOO_HPP
  #define FOO_HPP

  #include <iostream>

  namespace workshop {
      class Foo {
          private:
              int privateMember;
          public:
              Foo(int initialPrivateMember) : privateMember(initialPrivateMember) {
                  // constructor body
                  // do things other than member initialization
              }

              int getPrivateMember() {
                  return this->privateMember;
                  // return (*this).privateMember
              }

              void setPrivateMember(int newValue);

              virtual void overridableFunction() {
                  std::cout << "Foo overridableFunction implementation called" << std::endl;
              }
      };
  }

  #endif
  #+end_src
- ~foo.cpp~
  #+begin_src C++ :tangle code/oop/foo.cpp :main no
  #include "foo.hpp"

  using namespace workshop;

  void Foo::setPrivateMember(int newValue) {
      this->privateMember = newValue;
  }
  #+end_src
- ~main.cpp~
  #+begin_src C++ :tangle code/oop/main.cpp
  #include <iostream>
  #include "foo.hpp"

  int main() {
      using namespace workshop;

      Foo stackFoo(5);
      std::cout << "Private member (stack) = " << stackFoo.getPrivateMember() << std::endl;
      stackFoo.setPrivateMember(6);
      std::cout << "Private member (stack) = " << stackFoo.getPrivateMember() << std::endl;

      Foo *heapFoo = new Foo(5);
      std::cout << "Private member (heap) = " << heapFoo->getPrivateMember() << std::endl;
      heapFoo->setPrivateMember(6);
      std::cout << "Private member (heap) = " << heapFoo->getPrivateMember() << std::endl;

      delete heapFoo;
  }
  #+end_src

#+begin_src shell :results output verbatim
cd code/oop
g++ main.cpp foo.cpp -o main
./main
#+end_src

#+RESULTS:
: Private member (stack) = 5
: Private member (stack) = 6
: Private member (heap) = 5
: Private member (heap) = 6

