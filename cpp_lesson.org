#+TITLE: C++ Lesson

* new/delete
#+begin_src C++ :results output verbatim
#include <stdio.h>

int main() {
    for (int i = 0; i < 10; i++) {
        int *x = new int(i);
        printf("x = %d\n", *x);
        delete x;
    }
}
#+end_src

#+RESULTS:
#+begin_example
x = 0
x = 1
x = 2
x = 3
x = 4
x = 5
x = 6
x = 7
x = 8
x = 9
#+end_example

* Namespaces
- ~header1.hpp~
  #+begin_src C++ :tangle code/header1.hpp :main no
  #ifndef HEADER1_HPP
  #define HEADER1_HPP

  namespace foo {
      void do_something();
  }

  #endif
  #+end_src
- ~header2.hpp~
  #+begin_src C++ :tangle code/header2.hpp :main no
  #ifndef HEADER2_HPP
  #define HEADER2_HPP

  namespace foo {
      void do_something_else();
  }

  #endif
  #+end_src
- ~source1.cpp~
  #+begin_src C++ :tangle code/source1.cpp
  #include <stdio.h>
  #include "header1.hpp"
  #include "header2.hpp"

  void foo::do_something() {
      printf("Did something\n");
  }

  void foo::do_something_else() {
      printf("Did something else\n");
  }

  int main() {
      foo::do_something();

      using namespace foo;
      do_something_else();
  }
  #+end_src

#+begin_src shell :results output verbatim
cd code
make -s source1
./source1
#+end_src

#+RESULTS:
: Did something
: Did something else

* OOP
- ~foo.hpp~
  #+begin_src C++ :tangle code/oop/foo.hpp :mkdirp yes :main no
  #ifndef FOO_HPP
  #define FOO_HPP

  #include <iostream>

  namespace workshop {
      class Foo {
          private:
              int privateMember;
          public:
              Foo(int initialPrivateMember) : privateMember(initialPrivateMember) {
                  // constructor body
                  // do things other than member initialization
              }

              int getPrivateMember() {
                  return this->privateMember;
                  // return (*this).privateMember
              }

              void setPrivateMember(int newValue);

              virtual void overridableFunction() {
                  std::cout << "Foo overridableFunction implementation called" << std::endl;
              }
      };
  }

  #endif
  #+end_src
- ~foo.cpp~
  #+begin_src C++ :tangle code/oop/foo.cpp :main no
  #include "foo.hpp"

  using namespace workshop;

  void Foo::setPrivateMember(int newValue) {
      this->privateMember = newValue;
  }
  #+end_src
- ~main.cpp~
  #+begin_src C++ :tangle code/oop/main.cpp
  #include <iostream>
  #include "foo.hpp"

  int main() {
      using namespace workshop;

      Foo stackFoo(5);
      std::cout << "Private member (stack) = " << stackFoo.getPrivateMember() << std::endl;
      stackFoo.setPrivateMember(6);
      std::cout << "Private member (stack) = " << stackFoo.getPrivateMember() << std::endl;

      Foo *heapFoo = new Foo(5);
      std::cout << "Private member (heap) = " << heapFoo->getPrivateMember() << std::endl;
      heapFoo->setPrivateMember(6);
      std::cout << "Private member (heap) = " << heapFoo->getPrivateMember() << std::endl;

      delete heapFoo;
  }
  #+end_src

#+begin_src shell :results output verbatim
cd code/oop
g++ main.cpp foo.cpp -o main
./main
#+end_src

#+RESULTS:
: Private member (stack) = 5
: Private member (stack) = 6
: Private member (heap) = 5
: Private member (heap) = 6

** Polymorphism
- ~bar.hpp~
  #+begin_src C++ :tangle code/oop/bar.hpp :main no :mkdirp yes
  #ifndef BAR_HPP
  #define BAR_HPP

  #include "foo.hpp"

  namespace workshop {
      class Bar : public Foo {
          public:
              Bar() : Foo(10) {
                  // constructor body
              }

              void barMethod();
              // void overridableFunction() override;
      };
  };

  #endif
  #+end_src
- ~bar.cpp~
  #+begin_src C++ :tangle code/oop/bar.cpp :main no
  #include <iostream>

  #include "bar.hpp"

  using namespace workshop;

  void Bar::barMethod() {
      std::cout << "Bar: this->privateMember = " << this->getPrivateMember() << std::endl;
  }

  void Bar::overridableFunction() override {
      std::cout << "Bar overridableFunction implementation called" << std::endl;
  }
  #+end_src
- ~main2.cpp~
  #+begin_src C++ :tangle code/oop/main2.cpp :output results verbatim
  #include <iostream>

  #include "foo.hpp"
  #include "bar.hpp"

  int main() {
      using namespace workshop;

      Foo *foo = new Bar();
      std::cout << "Private member = " << foo->getPrivateMember() << std::endl;

      // condition can actually be omitted here
      if (Bar *bar = dynamic_cast<Bar *>(foo); bar != nullptr)
        bar->barMethod();

      foo->overridableFunction();

      delete foo;
  }
  #+end_src

#+begin_src shell :results output verbatim
cd code/oop
g++ main2.cpp foo.cpp bar.cpp -o main2
./main2
#+end_src

#+RESULTS:
: Private member = 10
: Bar: this->privateMember = 10
: Bar overridableFunction implementation called

* Standard Library
** iostream
#+begin_src C++ :results output verbatim :
#include <iostream>

int main() {
    std::cout << 5 << std::endl;
    std::cout << "Hello world" << std::endl;

    int j;
    std::cout << "Enter a value for j: ";
    std::cin >> j;

    std::cout << "j = " << j << std::endl;
}
#+end_src

#+RESULTS:
: 5
: Hello world
: Enter a value for j: 8
: j = 8
** vector
#+begin_src C++ :tangle code/vector.cpp :results output verbatim
#include <iostream>
#include <vector>

template <typename T>
void print_vector(const std::vector<T> &vector) {
    for (auto &i : vector)
        std::cout << i << ' ';
    std::cout << std::endl;
}

int main() {
    auto list = std::vector<int>( {1, 2, 3, 4, 5} );
    print_vector(list);

    list.push_back(6);
    print_vector(list);

    std::cout << list[3] << std::endl;
    std::cout << list.at(3) << std::endl;

    std::cout << list[5000] << std::endl;
    std::cout << list.at(5000) << std::endl;
}
#+end_src

#+RESULTS:
: 1 2 3 4 5
: 1 2 3 4 5 6
: 4
: 4
: 0
: terminate called after throwing an instance of 'std::out_of_range'
:   what():  vector::_M_range_check: __n (which is 5000) >= this->size() (which is 6)
: Aborted (core dumped)
* Smart Pointers
** unique_ptr
#+begin_src C++ :tangle code/unique_ptr.cpp :results output verbatim
#include <iostream>
#include <memory>

class Something {
    public:
        int j;

        Something(int initial_j_value) : j(initial_j_value) {
            std::cout << "Called Something constructor!" << std::endl;
        }

        ~Something() {
            std::cout << "Called Something destructor!" << std::endl;
        }
};

int main() {
    std::unique_ptr<Something> something_ptr = std::make_unique<Something>(100);
    std::cout << "something_ptr->j = " << something_ptr->j << std::endl;

    // auto ptr_alias = something_ptr;
}
#+end_src

#+RESULTS:
: Called Something constructor!
: something_ptr->j = 100
: Called Something destructor!
** shared_ptr
#+begin_src C++ :tangle code/shared_ptr.cpp :results output verbatim
#include <iostream>
#include <memory>
#include <optional>

class Something {
    public:
        int j;

        Something(int initial_j_value) : j(initial_j_value) {
            std::cout << "Called Something constructor!" << std::endl;
        }

        ~Something() {
            std::cout << "Called Something destructor!" << std::endl;
        }
};

class SomethingHolder {
    std::shared_ptr<Something> something_ptr;
    std::string tag;

    public:
        SomethingHolder(std::shared_ptr<Something> something_ptr, std::string tag) : something_ptr(something_ptr), tag(tag) {
            std::cout << "Created SomethingHolder: " << tag << "!" << std::endl;
        }

        ~SomethingHolder() {
            std::cout << "Destroyed SomethingHolder: " << tag << "!" << std::endl;
        }
};

int main() {
    std::optional<SomethingHolder> holder_1;

    {
        std::optional<SomethingHolder> holder_2;

        {
            std::shared_ptr<Something> something_ptr = std::make_shared<Something>(50);

            holder_1.emplace(something_ptr, "holder_1");
            holder_2.emplace(something_ptr, "holder_2");
        }

        std::cout << "Out of scope for something_ptr" << std::endl;
    }
}
#+end_src

#+RESULTS:
: Called Something constructor!
: Created SomethingHolder: holder_1!
: Created SomethingHolder: holder_2!
: Out of scope for something_ptr
: Destroyed SomethingHolder: holder_2!
: Destroyed SomethingHolder: holder_1!
: Called Something destructor!
*** weak_ptr
shared_ptr reference that does not contribute to reference count
** +auto_ptr+
